(function(global) {
    "use strict;"

    // Class ------------------------------------------------
    function SVGKeyboard() {
        return this;
    };

    // Header -----------------------------------------------
    SVGKeyboard["prototype"]["draw"] = SVGKeyboard_draw; // SVGKeyboard#draw(octave:Integer):Void

    // Implementation ---------------------------------------
    function SVGKeyboard_draw(octave) {
        octave = octave || 1;

        var x = 0;
        var y = 0;

        var styleWhite = 'fill:white;stroke:black';
        var widthWhite = 30;
        var heightWhite = 120;

        var styleBlack = 'fill:black;stroke:black';
        var widthBlack = widthWhite * 3 / 5;
        var heightBlack = 70;

        var widthOctave = widthWhite * 7 * octave;

        var elmSvg = document.getElementById('SVGKeyboard');
        elmSvg.setAttribute('width', widthOctave + 'px');
        elmSvg.innerHTML = '<!-- White keys -->';

        var i = 0;
        var repeat = 7 * octave;
        for (i = 0; i < repeat; i++) {
            x = widthWhite * i;
            elmSvg.innerHTML += '<rect style="' + styleWhite + '" x="' + x + '" y="' + y + '" width="' + widthWhite + '" height="' + heightWhite + '"/>';
        }

        elmSvg.innerHTML += '<!-- Black keys -->';
        i = 0;
        var j = 0;
        var repeatOctave = octave;
        var repeatTotalKey = 12;
        var idxFill = [1, 3, 6, 8, 10];
        var mod = 0;
        var baseWidth = 0;
        for (i = 0; i < repeatOctave; i++) {
            baseWidth = widthWhite * 7 * i;
            for (j = 0; j < repeatTotalKey; j++) {
                mod = j % 12;
                if (idxFill.indexOf(mod) >= 0) {
                    if (mod === 1 || mod === 3 || mod === 6) {
                        x = widthBlack * j;
                    }
                    else if (mod === 8) {
                        x = widthBlack * j - (widthBlack * 2 / 12 * 1);
                    }
                    else if (mod === 10) {
                        x = widthBlack * j - (widthBlack * 2 / 12 * 2);
                    }
                    x += baseWidth;
                    elmSvg.innerHTML += '<rect style="' + styleBlack + '" x="' + x + '" y="' + y + '" width="' + widthBlack + '" height="' + heightBlack + '"/>';
                }
            }
        }
    }

    // Exports ----------------------------------------------
    if ("process" in global) {
        module["exports"] = SVGKeyboard;
    }
    global["SVGKeyboard"] = SVGKeyboard;

})((this || 0).self || global);
